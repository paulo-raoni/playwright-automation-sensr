// Verifica se o arquivo auth.json (storageState) ainda √© v√°lido.
// Caso inv√°lido ou ausente, dispara o login autom√°tico via global.setup.js.
//
// ‚úÖ Uso principal: garantir que o ambiente est√° pronto antes de rodar testes E2E.
//
// üîß Execute manualmente com:
//     npm run check:auth
//
// üì¶ Script usado em pipelines, debug local e valida√ß√£o de CI.
//     Veja tamb√©m: scripts/loginAutomatic.js, tests/e2e/global.setup.js


const { chromium, expect } = require('@playwright/test');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

const { AUTH_FILE_PATH } = require('../tests/e2e/helpers/constants');
const globalSetup = require('../tests/e2e/global.setup.js');

(async () => {
  if (!fs.existsSync(AUTH_FILE_PATH)) {
    console.log('‚ö†Ô∏è auth.json n√£o existe. Executando login global...');
    await globalSetup();
    return;
  }

  const browser = await chromium.launch();
  const context = await browser.newContext({ storageState: AUTH_FILE_PATH });
  const page = await context.newPage();

  try {
    console.log(`üåê Validando sess√£o em: ${process.env.BASE_URL}`);
    await page.goto(`${process.env.BASE_URL}/dash/`);
    await expect(page).toHaveURL(/\/dash\/$/, { timeout: 5000 });
    console.log('‚úÖ Sess√£o v√°lida! auth.json est√° funcional.');
  } catch (err) {
    console.warn('‚ùå Sess√£o inv√°lida. Executando login global...');
    await globalSetup();
  } finally {
    await browser.close();
  }
})();
